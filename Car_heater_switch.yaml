blueprint:
  name: Car Heater Automation (Improved Weekday Selection)
  description: >
    This automation manages a car heater based on outdoor temperature, departure time,
    and selected weekdays. It ensures efficient power use and includes failsafe limits.
  domain: automation
  input:
    car_heater_switch:
      name: Car Heater Switch
      description: "The smart switch that controls the car heater (must support power monitoring)."
      selector:
        entity:
          domain: switch
    outside_temp_sensor:
      name: Outside Temperature Sensor
      description: "Sensor measuring the outdoor temperature."
      selector:
        entity:
          domain: sensor
          device_class: temperature
    car_heater_enable:
      name: Enable Car Heater
      description: "Enable or disable the automation."
      selector:
        entity:
          domain: input_boolean
    car_heater_departure_time:
      name: Departure Time
      description: "Select the planned departure time."
      selector:
        entity:
          domain: input_datetime
    car_heater_weekdays:
      name: Enable Weekdays (Mon-Fri)
      description: "Enable heating from Monday to Friday."
      selector:
        entity:
          domain: input_boolean
    car_heater_saturday:
      name: Enable Saturday
      description: "Enable heating on Saturdays."
      selector:
        entity:
          domain: input_boolean
    car_heater_sunday:
      name: Enable Sunday
      description: "Enable heating on Sundays."
      selector:
        entity:
          domain: input_boolean
    notification_device:
      name: Notification Device
      description: "Mobile device for notifications."
      selector:
        device:
          integration: mobile_app
    max_runtime:
      name: Max Heater Runtime (Hours)
      description: "Failsafe to prevent excessive power usage."
      default: 3
      selector:
        number:
          min: 1
          max: 5
          step: 1
          unit_of_measurement: "hours"

mode: restart

variables:
  temp_sensor: !input outside_temp_sensor
  heater_switch: !input car_heater_switch
  departure_time: !input car_heater_departure_time
  enable_heater: !input car_heater_enable
  weekdays_enabled: !input car_heater_weekdays
  saturday_enabled: !input car_heater_saturday
  sunday_enabled: !input car_heater_sunday
  notify_device: !input notification_device
  max_on_time: !input max_runtime
  power_sensor: "{{ state_attr(heater_switch, 'current_power_w') | float(0) }}"
  today: "{{ now().strftime('%A') | lower }}"

trigger:
  - platform: state
    entity_id: !input car_heater_enable
    from: "off"
    to: "on"

  - platform: time_pattern
    minutes: "/1"
    seconds: 00

condition:
  - condition: state
    entity_id: !input car_heater_enable
    state: "on"

  - condition: template
    value_template: "{{ states('sensor.car_heater_run_time') | float > 0 }}"

  # Only run on selected days
  - condition: template
    value_template: >-
      {{
        (weekdays_enabled == 'on' and today in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']) or
        (saturday_enabled == 'on' and today == 'saturday') or
        (sunday_enabled == 'on' and today == 'sunday')
      }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ now().strftime('%H:%M') == states('sensor.car_heater_start_time') }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input car_heater_switch
          - service: notify.mobile_app_{{ notify_device }}
            data:
              title: "Car Heater Started"
              message: "Car heater has been turned on based on the current temperature."

  - wait_template: "{{ power_sensor > 0 }}"
    timeout: "00:00:10"
    continue_on_timeout: true

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ not wait.completed }}"
        sequence:
          - service: notify.mobile_app_{{ notify_device }}
            data:
              title: "Car Heater Alert"
              message: "Car heater power cable might be disconnected! Outdoor temp: {{ states(temp_sensor) }}Â°C"

  - condition: template
    value_template: '{{ now().strftime("%H:%M:%S") == states.input_datetime.car_heater_departure_time.state }}'

  - service: switch.turn_off
    target:
      entity_id: !input car_heater_switch

  - service: notify.mobile_app_{{ notify_device }}
    data:
      title: "Car Heater Stopped"
      message: "Car heater has been turned off as the departure time was reached."

  - wait_template: "{{ states(heater_switch) == 'on' }}"
    timeout: "{{ max_on_time * 3600 }}"
    continue_on_timeout: true

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ wait.completed }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input car_heater_switch
          - service: notify.mobile_app_{{ notify_device }}
            data:
              title: "Car Heater Safety Shutoff"
              message: "Car heater has been running for {{ max_on_time }} hours and was automatically turned off for safety."
