#################################################################
## Car heater automation
#################################################################
#
#Search for CHANGE-ME and adapt to your instance.
#
#
#*******************
#*** Automations ***
#*******************

automation:
  - id: "car_heater_on_timer"
    alias: "Car heater: Turn on car heating timer"
    trigger:
      - entity_id: input_boolean.car_heater_enable
        from: "off"
        platform: state
        to: "on"
    action:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.car_heater_3h_before_temp
          # CHANGE-ME: outside temperature sensor
          value: "{{ states('sensor.balkong_temperature') }}"
      - event: car_heater_timer_enabled

  - id: "car_heater_start_if_needed"
    alias: "Car heater: Turn on immediately if needed"
    trigger:
      - platform: event
        event_type: car_heater_timer_enabled
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.sensor.car_heater_time_until_departure.state|float > 0 }}"
        - condition: template
          value_template: "{{ (states.sensor.car_heater_run_time.state|float * 60) >= states.sensor.car_heater_time_until_departure.state|float }}"
    action:
      - service: switch.turn_on
        # CHANGE-ME: car heater power switch
        entity_id: switch.motorvarmare

  #****************************************
  - id: "car_heater_push"
    alias: "Car heater: Not connected -push notification"
    description: ""
    trigger:
      - platform: state
        # CHANGE-ME: car heater power switch
        entity_id: switch.motorvarmare
        from: "off"
        to: "on"
    condition: []
    action:
      # CHANGE-ME: power consumption sensor
      - wait_template: "{{ states('sensor.motorvarmare_power') | float
          > 0.0 }}"
        timeout: 00:00:10
        continue_on_timeout: true
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ not wait.completed }}"
            sequence:
              - data:
                  message: >-
                    Car heating power cable is not connected! Outdor temp: {{
                    states('sensor.balkong_temperature') }}°C
                title: Car heater
            action: notify.mobile_app_christian
        default: []
    mode: single

  #****************************************
  - id: "car_heater_calculated_time"
    alias: "Car heater: Start at calculated start time"
    trigger:
      - platform: time_pattern
        minutes: "/1"
        seconds: 00
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{{ now().time().strftime("%H:%M") == states.sensor.car_heater_start_time.state }}'
        - condition: template
          value_template: "{{ states.sensor.car_heater_run_time.state|float > 0 }}"
        - condition: state
          entity_id: input_boolean.car_heater_enable
          state: "on"
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.car_heater_weekday
              state: "off"
            - condition: time
              weekday:
                - mon
                - tue
                - wed
                - thu
                - fri
    action:
      - service: switch.turn_on
        # CHANGE-ME: car heater power switch
        entity_id: switch.motorvarmare

  #****************************************
  - id: "car_heater_departure"
    alias: "Car heater: stop at departure time"
    trigger:
      - platform: time_pattern
        minutes: "/1"
        seconds: 00
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: '{{ now().time().strftime("%H:%M:%S") == states.input_datetime.car_heater_departure_time.state }}'
          - condition: template
            value_template: "{{ states.sensor.car_heater_run_time.state|float > 0 }}"
          - condition: state
            entity_id: input_boolean.car_heater_enable
            state: "on"
          - condition: or
            conditions:
              - condition: state
                entity_id: input_boolean.car_heater_weekday
                state: "off"
              - condition: time
                weekday:
                  - mon
                  - tue
                  - wed
                  - thu
                  - fri
    action:
      - service: switch.turn_off
        # CHANGE-ME: car heater power switch
        entity_id: switch.motorvarmare

  #****************************************
  - id: "car_heater_temp_sample_3h"
    alias: "Car heater: Sample temperature 3h before departure time"
    trigger:
      - platform: time_pattern
        minutes: "/1"
        seconds: 00
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{{ now().time().strftime("%H:%M") == states.sensor.car_heater_3h_before_start_time.state }}'
        - condition: state
          entity_id: input_boolean.car_heater_enable
          state: "on"
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.car_heater_weekday
              state: "off"
            - condition: time
              weekday:
                - mon
                - tue
                - wed
                - thu
                - fri
    action:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.car_heater_3h_before_temp
          # CHANGE-ME: outside temperature sensor
          value: "{{ states('sensor.balkong_temperature') }}"

  #****************************************
  - id: "Max on 3h"
    alias: "Car heater: Max on 3h"
    description: "Run every 5 min an check if switch been on for more than 3h"
    trigger:
      - platform: time_pattern
        minutes: /5
    condition:
      - condition: state
        for:
          hours: 3
          minutes: 0
          seconds: 0
        entity_id: switch.motorvarmare
        state: "on"
    action:
      - service: switch.turn_off
        target:
          entity_id: switch.motorvarmare

#*********************
#*** Input sensors ***
#*********************
input_datetime:
  car_heater_departure_time:
    name: Car heater departure time
    has_time: true
    has_date: false

input_number:
  car_heater_3h_before_temp:
    name: Sample temp
    unit_of_measurement: °C
    icon: mdi:thermometer
    min: -30
    max: 30
    step: 0.5

#***********************
#*** Boolean sensors ***
#***********************
input_boolean:
  car_heater_weekday:
    name: Only weekdays
    icon: mdi:calendar
  car_heater_enable:
    name: Enable car heating timer

#***************
#*** Sensors ***
#***************
sensor:
  - platform: template
    sensors:
      car_heater_run_time:
        friendly_name: "Calculated run time"
        unit_of_measurement: h
        value_template: >
          {% if ((states('input_number.car_heater_3h_before_temp')|float) < 10) %}
            {% if not states('input_number.car_heater_3h_before_temp') == 'unknown' %}
              {{(states('input_number.car_heater_3h_before_temp')|float * (-0.05) + 1)|round(1)}}
            {%endif%}
          {%else%}
            0
          {%endif%}
  - platform: template
    sensors:
      car_heater_start_time:
        friendly_name: "Calculated start time"
        icon_template: mdi:clock
        value_template: >
          {% if states.input_datetime.car_heater_departure_time.state is defined %}
            {% if ((states('sensor.car_heater_run_time')|float) > 0) %}
              {{ strptime(((as_timestamp('1970-01-01 ' ~ states('input_datetime.car_heater_departure_time')) - (states('sensor.car_heater_run_time')|float *3600))|timestamp_custom), '%Y-%m-%d %H:%M:%S').strftime("%H:%M") }}
            {%else%}
              Aldrig
            {%endif%}
          {% else %}
              väntar på sensorer
          {% endif%}
  - platform: template
    sensors:
      car_heater_3h_before_start_time:
        friendly_name: "3h before start time"
        icon_template: mdi:clock
        value_template: >
          {% if states.input_datetime.car_heater_departure_time.state is defined %}
              {{ strptime(((as_timestamp('1970-01-01 ' ~ states('input_datetime.car_heater_departure_time')) - (10800))|timestamp_custom), '%Y-%m-%d %H:%M:%S').strftime("%H:%M") }}
          {% else %}
              väntar på sensorer
          {% endif%}
  - platform: template
    sensors:
      car_heater_status:
        friendly_name: "Car heater status"
        icon_template: mdi:clock
        # CHANGE-ME: car heater power switch (note: two entrys in this block)
        value_template: >
          {% if is_state('input_boolean.car_heater_enable', 'on') %}
            {% if is_state('switch.motorvarmare', 'on') %}
              Motorvärmare är aktiv och kommer att stoppas kl {{ states.input_datetime.car_heater_departure_time.state }}
            {% else %}
              Motorvärmare startar ca kl {{ states.sensor.car_heater_start_time.state }} och kommer att stoppas kl {{ states.input_datetime.car_heater_departure_time.attributes.timestamp  | timestamp_custom("%H:%M", false) }}
            {% endif%}
          {% else %}
            {% if is_state('switch.motorvarmare', 'on') %}
              Motorvärmaren är aktiv och styrs manuellt!
            {% else %}
              Ingen motorvärmning planerad
            {%endif %}
          {% endif%}
  - platform: template
    sensors:
      car_heater_time_until_departure:
        friendly_name: "time until set departure"
        icon_template: mdi:clock
        value_template: >-
          {%- if as_timestamp(now().strftime("%Y-%m-%d ") + states.input_datetime.car_heater_departure_time.state) < as_timestamp(now()) -%}
            {{ ((as_timestamp(now().strftime("%Y-%m-%d ") +
              states.input_datetime.car_heater_departure_time.state) + (3600*24)) -
              as_timestamp(now().strftime("%Y-%m-%d %H:%M"))) / 60 }}
          {%- else -%}
            {{ (as_timestamp(now().strftime("%Y-%m-%d ") +
              states.input_datetime.car_heater_departure_time.state) -
              as_timestamp(now().strftime("%Y-%m-%d %H:%M"))) / 60 }}
          {%- endif -%}
